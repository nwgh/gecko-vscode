#!/usr/bin/env python3
# A script to ensure that, after we build, we regenerate the CompileDB so that
# vs code can complete things properly. Also tries to be smart and do a full
# build if necessary, and do just build binaries when possible to save time.

import copy
import datetime
import json
import os
import subprocess
import shutil
import sys
import time


setup_start = time.time()
clobber_start = None # May not exist
mach_start = None # Will exist
compiledb_start = None # May not exist
vsproj_start = None # May not exist, but compiledb_start will if it does
process_end = None # Will exist


def make_timedelta(start, end):
    delta = end - start
    sec = int(delta)
    usec = int((delta - sec) * 1000000)
    return datetime.timedelta(seconds=sec, microseconds=usec)


# This function is mostly shamelessly cribbed from mozbuild
def notify(msg):
    if sys.platform.startswith('darwin'):
        notifier = shutil.which('terminal-notifier')
        if not notifier:
            sys.stdout.write('Install terminal-notifier to get notifications '
                             'when builds finish.')
            return

        subprocess.call([notifier,
                         '-title', 'Mozilla Build System',
                         '-group', 'mozbuild',
                         '-message', msg])
    elif sys.platform.startswith('win'):
        from ctypes import Structure, windll, POINTER, sizeof
        from ctypes.wintypes import DWORD, HANDLE, WINFUNCTYPE, BOOL, UINT
        class FLASHWINDOW(Structure):
            _fields_ = [("cbSize", UINT),
                        ("hwnd", HANDLE),
                        ("dwFlags", DWORD),
                        ("uCount", UINT),
                        ("dwTimeout", DWORD)]
        FlashWindowExProto = WINFUNCTYPE(BOOL, POINTER(FLASHWINDOW))
        FlashWindowEx = FlashWindowExProto(("FlashWindowEX", windll.user32))
        FLASHW_CAPTION = 0x01
        FLASHW_TRAY = 0x02
        FLASHW_TIMERNOFG = 0x0C
        console = windll.kernel32.GetConsoleWindow()
        if not console:
            return
        params = FLASHWINDOW(sizeof(FLASHWINDOW),
                             console,
                             FLASHW_CAPTION | FLASHW_TRAY | FLASHW_TIMERNOFG,
                             3, 0)
        FlashWindowEx(params)
    else: # linux
        notifier = shutil.which('notify-send')
        if not notifier:
            sys.stdout.write('Install notify-send to get notifications when '
                             'builds finish')
            return

        subprocess.call([notifier, '--app-name=Mozilla Build System',
                         'Mozilla Build System', msg])


def run_mach(args, cwd):
    env = copy.deepcopy(os.environ)
    env['MOZ_NOSPAM'] = '1'

    if sys.platform == 'win32':
        mach_dir = '/' + cwd.replace(':', '').replace('\\', '/').lower()
        mach_wrapper = '/'.join([mach_dir, '.vscode', 'mach_wrapper_win'])
        subprocess.call(['c:\\mozilla-build\\start-shell.bat', mach_wrapper, mach_dir] + args, cwd=cwd, env=env)
        try:
            mach_result = json.load(open(os.path.join(cwd, '.vscode', 'mach-result.json')))
            return mach_result['code']
        except Exception as e:
            sys.stderr.write('Error getting mach result: %s\n' % (e,))
            return 1

    mach = ['./mach']
    return subprocess.call(mach + args, cwd=cwd, env=env)


is_git = False
is_hg = False


def different_branch(ref, head, cwd):
    if not ref:
        # short-circuit for first-time run
        return True

    if is_git:
        return different_branch_git(ref, head, cwd)
    elif is_hg:
        return different_branch_hg(ref, head, cwd)
    return different_branch_wat(ref, head, cwd)


def different_branch_git(ref, head, cwd):
    if subprocess.call(['git', 'merge-base', '--is-ancestor', ref, head], cwd=cwd) == 0:
        # ref is an ancestor of head, therefore we are effectively on the same
        # branch (for the purposes of building - headers won't have changed)
        return False
    return True


def different_branch_hg(ref, head, cwd):
    try:
        output = subprocess.check_output(['hg', 'log', '-r', '%s::%s' % (ref, head)], cwd=cwd).strip()
    except subprocess.CalledProcessError:
        # Something failed - perhaps one of the refs we asked about is obsolete. Assume
        # a different branch, for safety's sake.
        return True
    if output:
        # ref is an ancestor of head, therefore we are effectively on the same
        # branch (for the purposes of building - headers won't have changed)
        return False
    return True


def different_branch_wat(ref, head, cwd):
    # Just for schitzengiggel, assume things have changed
    return True

if sys.platform != 'win32':
    workspace_dir = sys.argv[1]
    mach = ['./mach']
else: # sys.platform == 'win32'
    mach = ['c:\\mozilla-build\\start-shell.bat', 'mach']
    workspace_dir = os.environ.get('NWGH_WORKSPACE_FOLDER', None)
    if not workspace_dir:
        sys.stderr.write('Could not find workspace folder\n')
        sys.exit(1)

if os.path.exists(os.path.join(workspace_dir, '.git')):
    is_git = True
    is_hg = False
elif os.path.exists(os.path.join(workspace_dir, '.hg')):
    is_git = False
    is_hg = True
else:
    sys.stderr.write('Not a git or hg checkout\n')
    sys.exit(1)

forced_command = None
if len(sys.argv) > 2:
    if sys.argv[2] == 'force':
        forced_command = 'build'
    elif sys.argv[2] == 'clobber':
        forced_command = 'clobber'
    elif sys.argv[2] == 'binaries':
        forced_command = 'binaries'

p = subprocess.Popen(mach + ['environment', '--format', 'json'], cwd=workspace_dir, stdout=subprocess.PIPE)
p.wait()
environment = json.load(p.stdout)
object_dir = environment['topobjdir']

using_tup = False
mozconfig_opt = environment['mozconfig']['vars']['added']['_mozconfig_opt']
if '--enable-build-backends=Tup' in mozconfig_opt:
    using_tup = True

ccache_path = None
for arg in environment['mozconfig']['configure_args']:
    if arg.startswith('--with-ccache='):
        ccache_path = arg.split('=')[1]

vscode_dir = os.path.join(workspace_dir, '.vscode')
build_config_file = os.path.join(vscode_dir, 'last-build-config.json')
last_build_config = {'result': 1, 'command': 'build', 'head': ''}
if os.path.exists(build_config_file):
    with open(build_config_file) as f:
        last_build_config.update(json.load(f))

last_head = current_head = last_build_config['head']
if is_git:
    current_head = subprocess.check_output(['git', 'rev-parse', 'HEAD'], cwd=workspace_dir).strip().decode('utf-8')
elif is_hg:
    current_head = subprocess.check_output(['hg', 'id', '-i', '-r', '.'], cwd=workspace_dir).strip().decode('utf-8')
else:
    sys.stderr.write('WTF?!')
    sys.exit(1)

if forced_command:
    command = forced_command
    if forced_command == 'clobber':
        clobber_start = time.time()
        run_mach(['clobber'], workspace_dir)
        command = 'build'
elif different_branch(last_head, current_head, workspace_dir):
    # We are on a branch that is not a descendent of the last branch we worked
    # on, so force a full rebuild to ensure new headers, etc are picked up.
    command = 'build'
elif using_tup:
    # Tup doesn't work with build binaries, so just do build
    command = 'build'
elif last_build_config['result'] != 0:
    # This failed last time, so just try the same one again
    command = last_build_config['command']
else:
    # We can try just building the binaries
    command = 'binaries'

last_build_config['command'] = command
last_build_config['head'] = current_head

args = ['--log-no-times', 'build']
if command == 'binaries':
    args.append('binaries')

sys.stdout.write('> Running mach %s\n' % (' '.join(args),))
mach_start = time.time()
result = run_mach(args, workspace_dir)
last_build_config['result'] = result
if command == 'build' and result == 0:
    # Now is the time to update the compile_commands.json used by vs code
    sys.stdout.write('> Generating CompileDB Backend\n')
    compiledb_start = time.time()
    run_mach(['--log-no-times', 'build-backend', '-b', 'CompileDB'], workspace_dir)
    if sys.platform == 'win32':
        # Also generate Visual Studio backend on windows
        sys.stdout.write('> Generating Visual Studio Backend\n')
        vsproj_start = time.time()
        run_mach(['--log-no-times', 'build-backend', '-b', 'VisualStudio'], workspace_dir)

    # Since mach puts the ccache command in our compiledb, we need to strip that
    # information out so as to not confuse vs code
    if ccache_path and sys.platform != 'win32':
        sed_command = 's/%s //g' % (ccache_path.replace('/', '\\/'),)
        compile_commands = os.path.join(object_dir, 'compile_commands.json')
        new_compile_commands = '%s.new' % (compile_commands,)
        with open(compile_commands) as old:
            with open(new_compile_commands, 'w') as new:
                subprocess.call(['sed', '-e', sed_command], stdin=old, stdout=new)

        os.rename(new_compile_commands, compile_commands)

if command == 'build' or command == 'binaries':
    notify('Build complete' if not result else 'Build failed')

# Update our on-disk status
with open(build_config_file, 'w') as f:
    json.dump(last_build_config, f)

process_end = time.time()

times = []
total_time = make_timedelta(setup_start, process_end)
if clobber_start:
    setup_time = make_timedelta(setup_start, clobber_start)
    times.append(('Setup', setup_time))
    clobber_time = make_timedelta(clobber_start, mach_start)
    times.append(('Clobber', clobber_time))
else:
    setup_time = make_timedelta(setup_start, mach_start)
    times.append(('Setup', setup_time))
if compiledb_start:
    mach_time = make_timedelta(mach_start, compiledb_start)
    times.append(('Build', mach_time))
    if vsproj_start:
        compiledb_time = make_timedelta(compiledb_start, vsproj_start)
        times.append(('CompileDB Generation', compiledb_time))
        vsproj_time = make_timedelta(vsproj_start, process_end)
        times.append(('VS Project Generation', vsproj_time))
    else:
        compiledb_time = make_timedelta(compiledb_start, process_end)
        times.append(('CompileDB Generation', compiledb_time))
else:
    mach_time = make_timedelta(mach_start, process_end)
    times.append(('Build', mach_time))

sys.stdout.write('Timings\n')
for t in times:
    sys.stdout.write('\t%s: %s\n' % (t[0], str(t[1])))
sys.stdout.write('\tTotal: %s\n' % (str(total_time),))

if result:
    sys.stdout.write('Exiting with error %d\n' % (result,))
sys.exit(result)
