#!/usr/bin/env python
# A script to ensure that, after we build, we regenerate the CompileDB so that
# vs code can complete things properly. Also tries to be smart and do a full
# build if necessary, and do just build binaries when possible to save time.

import json
import os
import subprocess
import sys


def run_mach(args, cwd):
    if sys.platform == 'win32':
        mach_dir = '/' + cwd.replace(':', '').replace('\\', '/').lower()
        mach_wrapper = '/'.join([mach_dir, '.vscode', 'mach_wrapper_win'])
        subprocess.call(['c:\\mozilla-build\\start-shell.bat', mach_wrapper, mach_dir] + args, cwd=cwd)
        try:
            mach_result = json.load(file(os.path.join(cwd, '.vscode', 'mach-result.json')))
            return mach_result['code']
        except Exception as e:
            sys.stderr.write('Error getting mach result: %s\n' % (e,))
            return 1

    return subprocess.call(['./mach'] + args, cwd=cwd)


def ensure_sha(ref, cwd):
    if ref.startswith('ref: '):
        ref = ref.split(' ', 1)[1]
    return subprocess.check_output(['git', 'rev-parse', ref], cwd=cwd).strip()


def different_branch(ref, cwd):
    ref = ensure_sha(ref, cwd)
    head = subprocess.check_output(['git', 'rev-parse', 'HEAD'], cwd=cwd).strip()
    if subprocess.call(['git', 'merge-base', '--is-ancestor', ref, head], cwd=cwd) == 0:
        # ref is an ancestor of head, therefore we are effectively on the same
        # branch (for the purposes of building - headers won't have changed)
        return False
    return True

if sys.platform != 'win32':
    workspace_dir = sys.argv[1]
    mach = ['./mach']
else: # sys.platform == 'win32'
    mach = ['c:\\mozilla-build\\start-shell.bat', 'mach']
    workspace_dir = os.environ.get('NWGH_WORKSPACE_FOLDER', None)
    if not workspace_dir:
        sys.stderr.write('Could not find workspace folder\n')
        sys.exit(1)

forced_command = None
if len(sys.argv) > 2:
    if sys.argv[2] == 'force':
        forced_command = 'build'
    elif sys.argv[2] == 'clobber':
        forced_command = 'clobber'
    elif sys.argv[2] == 'binaries':
        forced_command = 'binaries'

p = subprocess.Popen(mach + ['environment', '--format', 'json'], cwd=workspace_dir, stdout=subprocess.PIPE)
p.wait()
environment = json.load(p.stdout)
object_dir = environment['topobjdir']

ccache_path = None
for arg in environment['mozconfig']['configure_args']:
    if arg.startswith('--with-ccache='):
        ccache_path = arg.split('=')[1]

vscode_dir = os.path.join(workspace_dir, '.vscode')
build_config_file = os.path.join(vscode_dir, 'last-build-config.json')
last_build_config = {'result': None, 'command': 'build', 'head': None}
with file(build_config_file) as f:
    last_build_config.update(json.load(f))

head_file = os.path.join(workspace_dir, '.git', 'HEAD')
last_head = current_head = last_build_config['head']
with file(head_file) as f:
    current_head = ensure_sha(f.read().strip(), workspace_dir)

if forced_command:
    command = forced_command
    if forced_command == 'clobber':
        run_mach(['clobber'], workspace_dir)
        command = 'build'
elif different_branch(last_head, workspace_dir):
    # We are on a branch that is not a descendent of the last branch we worked
    # on, so force a full rebuild to ensure new headers, etc are picked up.
    command = 'build'
elif last_build_config['result'] != 0:
    # This failed last time, so just try the same one again
    command = last_build_config['command']
else:
    # We can try just building the binaries
    command = 'binaries'

last_build_config['command'] = command
last_build_config['head'] = current_head

args = ['--log-no-times', 'build']
if command == 'binaries':
    args.append('binaries')

sys.stdout.write('> Running mach %s\n' % (' '.join(args),))
result = run_mach(args, workspace_dir)
last_build_config['result'] = result
if command == 'build' and result == 0:
    # Now is the time to update the compile_commands.json used by vs code
    sys.stdout.write('> Generating CompileDB Backend\n')
    run_mach(['--log-no-times', 'build-backend', '-b', 'CompileDB'], workspace_dir)
    if sys.platform == 'win32':
        # Also generate Visual Studio backend on windows
        sys.stdout.write('> Generating Visual Studio Backend\n')
        run_mach(['--log-no-times', 'build-backend', '-b', 'VisualStudio'], workspace_dir)

    # Since mach puts the ccache command in our compiledb, we need to strip that
    # information out so as to not confuse vs code
    if ccache_path and sys.platform != 'win32':
        sed_command = 's/%s //g' % (ccache_path.replace('/', '\\/'),)
        compile_commands = os.path.join(object_dir, 'compile_commands.json')
        new_compile_commands = '%s.new' % (compile_commands,)
        with file(compile_commands) as old:
            with file(new_compile_commands, 'w') as new:
                subprocess.call(['sed', '-e', sed_command], stdin=old, stdout=new)
        os.rename(new_compile_commands, compile_commands)

# Update our on-disk status
with file(build_config_file, 'w') as f:
    json.dump(last_build_config, f)
